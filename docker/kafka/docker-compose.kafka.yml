services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    networks:
      - internal_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    volumes:
      - kafka-data:/var/lib/kafka
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9092"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  # kafka-rest:
  #   image: confluentinc/cp-kafka-rest:latest
  #   container_name: kafka-rest
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     KAFKA_REST_HOST_NAME: kafka-rest
  #     KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
  #     KAFKA_REST_LISTENERS: http://0.0.0.0:8082
  #   networks:
  #     - kafka-net

  # ksql-server:
  #   image: confluentinc/cp-ksql-server:latest
  #   container_name: ksql-server
  #   environment:
  #     KSQL_KSQL_SERVICE_ID: ksql-server
  #     KSQL_KSQL_BOOTSTRAP_SERVERS: kafka:29092
  #     KSQL_LISTENER: http://0.0.0.0:8088
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8088:8088"
  #   networks:
  #     - internal_network
  #   restart: unless-stopped

  # kafka-mirror-maker:
  #   image: confluentinc/cp-kafka-mirror-maker:latest
  #   container_name: kafka-mirror-maker
  #   depends_on:
  #     - kafka
  #   environment:
  #     CONSUMER_BOOTSTRAP_SERVERS: source-kafka:9092
  #     PRODUCER_BOOTSTRAP_SERVERS: target-kafka:9092
  #     CONSUMER_GROUP_ID: mirror-maker-group
  #     TOPICS: ".*" # replicating all topics
  #   networks:
  #     - kafka-net

  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   container_name: kafdrop
  #   environment:
  #     SERVER_PORT: 9000
  #     KAFKA_BROKERCONNECT: kafka:29092
  #     # JVM_OPTS: "-Xms32M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - internal_network
  #   restart: unless-stopped

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    restart: always
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
      VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PRODUCER_INTERCEPTORS: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTORS: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      ENABLE_DEBEZIUM_SCRIPTING: 'true'  
    depends_on:
      - kafka
    volumes:
      - debezium-data:/kafka/connect
    networks:
      - internal_network
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  # debezium-ui:
  #   image: debezium/debezium-ui:latest
  #   container_name: debezium-ui
  #   environment:
  #     DEBEZIUM_UI_TITLE: Debezium UI
  #     SPRING_PROFILES_ACTIVE: default
  #     DEBEZIUM_API_URL: http://debezium:8083
  #     SPRING_LOG_LEVEL: DEBUG
  #   ports:
  #     - '8080:8080'
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #     - debezium
  #   networks:
  #     - internal_network 
  #   restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka
    ports:
      - '8081:8081'
    networks:
      - internal_network

volumes:
  zookeeper-data:
  kafka-data:
  debezium-data:

networks:
  internal_network:
    external: true